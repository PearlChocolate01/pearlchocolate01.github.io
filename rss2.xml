<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>珍珠巧克力</title>
    <link>https://pearlchocolatezy.com/</link>
    
    <atom:link href="https://pearlchocolatezy.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Mon panache. - 我的勇气。</description>
    <pubDate>Fri, 23 May 2025 14:10:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LeetCode热题100：91-100解析</title>
      <link>https://pearlchocolatezy.com/2025/05/23/LeetCode100-91-100/</link>
      <guid>https://pearlchocolatezy.com/2025/05/23/LeetCode100-91-100/</guid>
      <pubDate>Fri, 23 May 2025 14:09:28 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;91-不同路径（多维动态规划-不同路径）&quot;&gt;&lt;a href=&quot;#91-不同路径（多维动态规划-不同路径）&quot; class=&quot;headerlink&quot; title=&quot;91. 不同路径（多维动态规划/不同路径）&quot;&gt;&lt;/a&gt;91. 不同路径（多维动态规划/不同路径）&lt;/h3</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="91-不同路径（多维动态规划-不同路径）"><a href="#91-不同路径（多维动态规划-不同路径）" class="headerlink" title="91. 不同路径（多维动态规划/不同路径）"></a>91. 不同路径（多维动态规划/不同路径）</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。<br>问总共有多少条不同的路径？<br>假设：1 &lt;= m, n &lt;= 100；题目数据保证答案小于等于 2 * $(10)^9$。<br>示例：输入：m = 3, n = 7；输出：28。</p><blockquote><p>【分析】</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">UniquePaths</span>(<span class="params"><span class="built_in">int</span> m, <span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://pearlchocolatezy.com/2025/05/23/LeetCode100-91-100/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>02333 软件工程（一）——绪论</title>
      <link>https://pearlchocolatezy.com/2025/05/20/02333-1/</link>
      <guid>https://pearlchocolatezy.com/2025/05/20/02333-1/</guid>
      <pubDate>Tue, 20 May 2025 13:59:22 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;一、绪论&quot;&gt;&lt;a href=&quot;#一、绪论&quot; class=&quot;headerlink&quot; title=&quot;一、绪论&quot;&gt;&lt;/a&gt;一、绪论&lt;/h2&gt;&lt;p&gt;&lt;pre class=&quot;mermaid&quot;&gt;graph LR
    A[绪论] --&gt; A1[软件工程的提出与发展]
   </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><p><pre class="mermaid">graph LR    A[绪论] --> A1[软件工程的提出与发展]    A --> A2[软件开发的本质]</pre><br><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    </pre></div></p><ol><li>目的：解决软件危机。</li><li>成果：<br>20世纪60年代-80年代初：瀑布模型，C语言，Pascal语言，Jackson方法，结构化方法，支持工具。<br>20世纪80年代-：软件生存周期过程，辅助工程CASE，面向对象。</li><li>软件危机的表现：生产效率低、质量低，缺乏原理、原则、方法、管理，超预算，时间拖延，无法满足需求，可维护性查，可靠性差。（背）</li><li>计算机软件的概念：（1）计算机软件一般是指计算机系统中的<i id="answer1_4_1" class="answer" onclick="showOrHide('1_4_1')">程序</i>及其<i id="answer1_4_2" class="answer" onclick="showOrHide('1_4_2')">文档</i>；（2）程序是计算机任务的处理对象和处理规则的描述；（3）文档是为了理解程序所需的阐述性资料。（4）软件是一个特定问题域的抽象，是一种逻辑实体。（背）</li><li>提出软件工程的目的：倡导以工程的原理、原则、方法进行软件开发，以期解决“软件危机”。（背）</li><li>软件危机的概念：软件生产率、软件质量远远满足不了社会发展的需求，成为社会、经济发展的制约因素。</li><li><p>软件工程的两个时期：前期研究系统实现技术，后期关注<i id="answer1_7_1" class="answer" onclick="showOrHide('1_7_1')">软件质量</i>和<i id="answer1_7_2" class="answer" onclick="showOrHide('1_7_2')">软件工程管理</i>。</p></li><li><p>软件系统模型大体分两类：软件模型，概念模型。</p></li><li>软件模型进一步分为：设计模型，实现模型，部署模型。</li><li>系统模型：系统模型是代建系统的任意抽象，其中包括所有的基本能力、特性或其他方面，没有任何冗余的细节。（背）</li><li>软件开发的本质：实现<i id="answer1_11_1" class="answer" onclick="showOrHide('1_11_1')">问题空间</i>的概念和处理逻辑到<i id="answer1_11_2" class="answer" onclick="showOrHide('1_11_2')">解空间</i>的概念和处理逻辑之间的<i id="answer1_11_3" class="answer" onclick="showOrHide('1_11_3')">映射</i>。实现这一映射的基本途径可采用<i id="answer1_11_4" class="answer" onclick="showOrHide('1_11_4')">系统建模</i>。（背）</li><li>软件开发的本质所涉及的问题：（1）技术层面如何实现这样的映射。涉及两方面：过程方向，即求解软件的开发逻辑；过程途径，即求解软件的开发手段。（2）管理层面如何管理这样的映射，以保障映射的有效性和正确性，主要功能包括：软件项目的规划、组织、人员安排、控制、领导。（背）</li><li>系统建模：运用所掌握的知识，通过抽象，给出该系统的一个结构——系统模型。</li></ol><h2 id="二、软件需求与软件需求规约"><a href="#二、软件需求与软件需求规约" class="headerlink" title="二、软件需求与软件需求规约"></a>二、软件需求与软件需求规约</h2><p><pre class="mermaid">graph LR    A[软件需求] --> A1[需求概念]    A --> A2[需求获取]    A --> A3[需求规约]</pre><br><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    </pre></div></p><ol><li>软件需求分为：功能需求（主体），非功能需求。</li><li>接口需求的分类：用户接口，硬件接口，软件接口，通信接口，内存约束，运行，地点需求。</li><li>单个需求必须具有的基本性质：必要的、无歧义的、可测的、可测量的。</li><li>需求分析的三大挑战：问题空间理解，人与人之间的通信，需求的变化性。</li><li>初始发现需求的常用技术：自悟，交谈（提问/回答），观察（可能引起抵触），小组会，提炼（已有文档）。</li><li>验证需求是否正确的技术：自悟、提炼。</li><li>需求规约的定义：需求规约是一个软件项目/产品/系统所有需求陈述的正式文档，它表达了一个软件产品/系统的概念模型。</li><li>软件需求规约的性质：重要性，稳定性，可修改性，完整性（基本），一致性。</li><li>需求规约的三种形式：<br>（1）非形式化的需求规约：基于自然语言来编制需求规约。<br>（2）半形式化的需求规约：以半形式化符号体系（术语表）等表达需求规约。<br>（3）形式化规约：基于良构数学概念符号体系来编制需求规约。</li><li>需求规约在项目开发中的基本作用：<br>（1）需求规约是软件开发组织和用户之间一份事实上的技术合同书，是产品功能及其环境的体现；（1分）<br>（2）对于项目的其余大多数工作，需求规约是一个管理控制点；（1分）<br>（3）对于产品/系统的设计，需求规约是一个正式的、受控的起始点；（1分）<br>（4）是创建产品验收测试计划和用户指南的基础，即基于需求规约一般还会产生另外两个文档：初始测试计划和用户系统操作描述。（2分）</li><li>需求规约与项目需求有哪些不同？<br>（1）需求规约是软件开发组织和用户之间一份事实上的技术合同书，即关注产品需求，（1分）回答“交付给客户的产品/系统是什么了（1分）。<br>（2）项目需求是客户和开发者之间有关技术合同-产品/ 系统需求的理解。（1分）应记录在工作陈述中或其他某一项目文档中,即关注项目工作于管理，（1分）回答“开发组要做的是什么事。（1分）</li></ol><script>//填空专用function showOrHide(index){    let answer_text=document.getElementById(`answer${index}`);    if(answer_text.classList.contains('hide_answer')){        answer_text.classList.remove('hide_answer');    }else {        answer_text.classList.add('hide_answer');    }}</script><style>.answer{    color:transparent;    position: relative;}.answer::after {  content: "";  position: absolute;  left: 0;  bottom: 0;  width: 100%;  height: 1px; /* 下划线高度 */  background-color: black; /* 下划线颜色 */}.hide_answer{    color:black;}</style>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/X2080901/">X2080901</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/20/02333-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：71-80解析</title>
      <link>https://pearlchocolatezy.com/2025/05/19/LeetCode100-71-80/</link>
      <guid>https://pearlchocolatezy.com/2025/05/19/LeetCode100-71-80/</guid>
      <pubDate>Mon, 19 May 2025 15:23:46 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;74-数组中的第K个最大元素（堆-215）&quot;&gt;&lt;a href=&quot;#74-数组中的第K个最大元素（堆-215）&quot; class=&quot;headerlink&quot; title=&quot;74. 数组中的第K个最大元素（堆/215）&quot;&gt;&lt;/a&gt;74. 数组中的第K个最大元素（堆/215）</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="74-数组中的第K个最大元素（堆-215）"><a href="#74-数组中的第K个最大元素（堆-215）" class="headerlink" title="74. 数组中的第K个最大元素（堆/215）"></a>74. 数组中的第K个最大元素（堆/215）</h3><p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。<br>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br>你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。<br>假设：<br>    1 &lt;= k &lt;= nums.length &lt;= $(10)^5$；<br>    $(-10)^4$ &lt;= nums[i] &lt;= $(10)^4$。<br>示例：输入: [3,2,1,5,6,4], k = 2；输出: 5。</p><blockquote><p>【分析】<br>解法1：使用堆，空间换时间，时间复杂度O(nlogk)。<br>堆（heap,数据结构）：堆是一种特殊的完全二叉树。C#中没有具体的接口或类可用于堆，可以自己建一个，使用数组来存储，为堆结构写一个上浮和下沉的方法使堆可以排序为大顶堆或小顶堆。<br>最大堆（大顶堆）：每个节点的值都大于或等于其子节点的值。<br>最小堆（小顶堆）：每个节点的值都小于或等于其子节点的值。<br>解法2：快速选择算法，时间复杂度O(n)。<br>快速选择算法是快速排序的一个变种，它用于在未排序的数组中找到第 k 大（或第 k 小）的元素。<br>分区函数式为了找到枢纽元素在数组中的最终位置，也是快排的核心算法。<br>每次调整后只取随机枢纽元素的一侧进行递归再排序。<br>就取第K个最大元素这个需求而言，不需要把整个数组排序，只要找到第K个最大元素的正确位置即可。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="comment">//1. 使用堆</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FindKthLargest1</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> k</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 快速选择算法（快速排序）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FindKthLargest2</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> k</span>)</span>&#123;</span><br><span class="line">QuickSort(nums,<span class="number">0</span>,nums.Length<span class="number">-1</span>,k);</span><br><span class="line"><span class="keyword">return</span> nums[nums.Length-k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> left, <span class="built_in">int</span> right, <span class="built_in">int</span> k</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line"><span class="built_in">int</span> pviot=Partition(nums,left,right);</span><br><span class="line"><span class="comment">//快排提前终止（不需要无限递归到数组结束）</span></span><br><span class="line"><span class="keyword">if</span>(pviot==nums.Length-k)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快排分区优化</span></span><br><span class="line"><span class="keyword">if</span>(pviot&gt;nums.Length-k)&#123;</span><br><span class="line">QickSort(nums,left,pviot<span class="number">-1</span>,k);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">QickSort(nums,pviot+<span class="number">1</span>,right,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Partition</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> left, <span class="built_in">int</span> right</span>)</span>&#123;</span><br><span class="line">Swap(nums,left,(left+right)/<span class="number">2</span>);<span class="comment">//随机数和中位数的意义差不多</span></span><br><span class="line"><span class="built_in">int</span> pviotNum=nums[left];</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]&gt;=pviotNum)&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">nums[left]=nums[right];</span><br><span class="line"><span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]&lt;=pviotNum)&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">nums[right]=nums[left];</span><br><span class="line">&#125;</span><br><span class="line">nums[left]=pviotNum;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[a]!=nums[b])&#123;</span><br><span class="line"><span class="built_in">int</span> temp=nums[a];</span><br><span class="line">nums[a]=nums[b];</span><br><span class="line">nums[b]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="77-买股票的最佳时机（贪心算法-121）"><a href="#77-买股票的最佳时机（贪心算法-121）" class="headerlink" title="77. 买股票的最佳时机（贪心算法/121）"></a>77. 买股票的最佳时机（贪心算法/121）</h3><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。<br>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。<br>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。<br>假设：<br>    1 &lt;= prices.length &lt;= $(10)^5$；<br>    0 &lt;= prices[i] &lt;= $(10)^4$。<br>示例：输入：[7,1,5,3,6,4]；输出：5。</p><blockquote><p>【分析】<br>找到整数数组中的两个元素，使得后一元素减去前一元素的差最大。<br>时间复杂度O(n)，空间复杂度O(1)。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxProfit</span>(<span class="params"><span class="built_in">int</span>[] prices</span>)</span>&#123;</span><br><span class="line"><span class="built_in">int</span> minPrice=prices[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">int</span> maxProfit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> price <span class="keyword">in</span> prices)&#123;</span><br><span class="line">minPrice=Math.Min(minPrice,price);</span><br><span class="line">maxProfit=Math.Max(maxProfit,price-minPrice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxProfit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/19/LeetCode100-71-80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：61-70解析</title>
      <link>https://pearlchocolatezy.com/2025/05/19/LeetCode100-61-70/</link>
      <guid>https://pearlchocolatezy.com/2025/05/19/LeetCode100-61-70/</guid>
      <pubDate>Mon, 19 May 2025 15:21:55 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;63-搜索插入位置（二分查找-35）&quot;&gt;&lt;a href=&quot;#63-搜索插入位置（二分查找-35）&quot; class=&quot;headerlink&quot; title=&quot;63. 搜索插入位置（二分查找/35）&quot;&gt;&lt;/a&gt;63. 搜索插入位置（二分查找/35）&lt;/h3&gt;&lt;p&gt;给定一个</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="63-搜索插入位置（二分查找-35）"><a href="#63-搜索插入位置（二分查找-35）" class="headerlink" title="63. 搜索插入位置（二分查找/35）"></a>63. 搜索插入位置（二分查找/35）</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br>请必须使用时间复杂度为 O(log n) 的算法。<br>假设：<br>    1 &lt;= nums.length &lt;= $(10)^4$；<br>    $(-10)^4$ &lt;= nums[i] &lt;= $(10)^4$；<br>    nums 为 无重复元素 的 升序 排列数组；<br>    $(-10)^4$ &lt;= target &lt;= $(10)^4$。<br>示例：输入: nums = [1,3,5,6], target = 5；输出: 2。</p><blockquote><p>【分析】<br>解法：二分法</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SearchInsert</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span>&#123;</span><br><span class="line"><span class="comment">//定义两个指针</span></span><br><span class="line"><span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> right = nums.Length<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line"><span class="built_in">int</span> mid=left+(right-left)/<span class="number">2</span>;<span class="comment">//转整数</span></span><br><span class="line"><span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">left=mid+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="69-有效的括号（栈-20）"><a href="#69-有效的括号（栈-20）" class="headerlink" title="69. 有效的括号（栈/20）"></a>69. 有效的括号（栈/20）</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：<br>1.左括号必须用相同类型的右括号闭合。<br>2.左括号必须以正确的顺序闭合。<br>3.每个右括号都有一个对应的相同类型的左括号。<br>假设：<br>    1 &lt;= s.length &lt;= $(10)^4$；<br>    s 仅由括号 ‘()[]{}’ 组成。<br>示例：输入：s = “(]”；输出：false。</p><blockquote><p>【分析】<br>解法：使用栈数据结构。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>&#123;</span><br><span class="line">Stack&lt;<span class="built_in">char</span>&gt; stack=<span class="keyword">new</span> Stack&lt;<span class="built_in">char</span>&gt;();</span><br><span class="line">Dictionary&lt;<span class="built_in">char</span>,<span class="built_in">char</span>&gt; map=<span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>,<span class="built_in">char</span>&gt;()&#123;</span><br><span class="line">&#123;<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;(&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;[&#x27;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">char</span> c <span class="keyword">in</span> s)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">stack.Push(c);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span> || c==<span class="string">&#x27;&#125;&#x27;</span> || c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(stack.Count==<span class="number">0</span> || stack.Pop()!=map[c])&#123;<span class="comment">//或条件：第一个条件判断为true即返回false出去，第一个条件判断为false则走第二个条件，第二个条件要Pop也必然stack.Count!=0，第二个条件判断的同时也是执行stack.Pop()。</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack.Count==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/19/LeetCode100-61-70/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：51-60解析</title>
      <link>https://pearlchocolatezy.com/2025/05/18/LeetCode100-51-60/</link>
      <guid>https://pearlchocolatezy.com/2025/05/18/LeetCode100-51-60/</guid>
      <pubDate>Sun, 18 May 2025 12:37:23 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;51-岛屿数量（图论-200）&quot;&gt;&lt;a href=&quot;#51-岛屿数量（图论-200）&quot; class=&quot;headerlink&quot; title=&quot;51. 岛屿数量（图论/200）&quot;&gt;&lt;/a&gt;51. 岛屿数量（图论/200）&lt;/h3&gt;&lt;p&gt;给你一个由 ‘1’（陆地）和 ‘</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="51-岛屿数量（图论-200）"><a href="#51-岛屿数量（图论-200）" class="headerlink" title="51. 岛屿数量（图论/200）"></a>51. 岛屿数量（图论/200）</h3><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。<br>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。<br>此外，你可以假设该网格的四条边均被水包围。<br>假设：<br>    m == grid.length；<br>    n == grid[i].length；<br>    1 &lt;= m, n &lt;= 300；<br>    <code>grid[i][j]</code> 的值为 ‘0’ 或 ‘1’。</p><blockquote><p>【分析】<br>解法1：深度优先搜索（DFS）<br>循环每个元素，遇到“1”则增加岛屿数，同时调用深度优先搜索方法，递归地根据当前元素是否为“1”将当前元素十字路线上的元素都置“0”，使每个岛屿块最终只剩一个“1”。<br>解法2：广度优先搜索（BFS）</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">NumIslands1</span>(<span class="params"><span class="built_in">char</span>[][] grid</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(grid==<span class="literal">null</span> || grid.Length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> numIslands=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> rows=grid.Length;</span><br><span class="line"><span class="built_in">int</span> cols=grid[<span class="number">0</span>].Length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(grid[i][j]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">numIslands++;</span><br><span class="line">DFS(grid,i,j,rows,cols);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> numIslands;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DFS</span>(<span class="params"><span class="built_in">char</span>[][] grid, <span class="built_in">int</span> i, <span class="built_in">int</span> j, <span class="built_in">int</span> rows, <span class="built_in">int</span> cols</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=rows || j&lt;<span class="number">0</span> || j&gt;=cols || grid[i][j]!=<span class="string">&#x27;1&#x27;</span>)&#123;<span class="comment">//中断递归</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grid[i][j]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序为“下、上、右、左”，不是固定顺序</span></span><br><span class="line">DFS(grid,i+<span class="number">1</span>,j,rows,cols);</span><br><span class="line">DFS(grid,i<span class="number">-1</span>,j,rows,cols);</span><br><span class="line">DFS(grid,i,j+<span class="number">1</span>,rows,cols);</span><br><span class="line">DFS(grid,i,j<span class="number">-1</span>,rows,cols);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="55-全排列（回溯-46）"><a href="#55-全排列（回溯-46）" class="headerlink" title="55. 全排列（回溯/46）"></a>55. 全排列（回溯/46）</h3><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。<br>假设：<br>    1 &lt;= nums.length &lt;= 6；<br>    -10 &lt;= nums[i] &lt;= 10；<br>    nums 中的所有整数 互不相同。<br>示例：输入：nums = [1,2,3]；输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]。</p><blockquote><p>【分析】<br>解法：回溯法（递归）<br>时间复杂度O(n*n!)<br>递推：函数不断调用自身，将问题分解为更小的子问题。<br>回溯：当递归达到基本情况（即不能再分解的子问题）时，逐层返回结果。<br>回溯算法通常基于递归实现。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; Permute(<span class="built_in">int</span>[] nums)&#123;</span><br><span class="line">IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; resAll=<span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line"><span class="comment">//Q:为什么只有第一个IList转为List：</span></span><br><span class="line"><span class="comment">//A:将外层的IList接口转为具体实现的List，这个实例化过程是正确的。</span></span><br><span class="line"><span class="comment">//不能写成IList&lt;IList&lt;int&gt;&gt; res = new List&lt;List&lt;int&gt;&gt;();</span></span><br><span class="line"><span class="comment">//因为res所声明的变量类型IList&lt;IList&lt;int&gt;&gt; 要求存储的是 IList&lt;int&gt; 类型的对象，而 List&lt;List&lt;int&gt;&gt; 无法满足这个要求。</span></span><br><span class="line"><span class="comment">//IList&lt;IList&lt;int&gt;&gt; 是声明类型，表示可以存储 IList&lt;int&gt; 类型对象的集合。</span></span><br><span class="line"><span class="comment">//new List&lt;IList&lt;int&gt;&gt;() 是具体的实现，表示创建一个可以存储 IList&lt;int&gt; 类型对象的 List。</span></span><br><span class="line"><span class="comment">//这种写法符合接口和实现类的关系，同时也符合泛型的类型安全要求。</span></span><br><span class="line"></span><br><span class="line">IList&lt;<span class="built_in">int</span>&gt; resOne=<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();<span class="comment">//用于记录其中一组排列</span></span><br><span class="line">Trackback(nums,resAll,resOne);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Trackback</span>(<span class="params"><span class="built_in">int</span>[] nums, IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; resAll, IList&lt;<span class="built_in">int</span>&gt; resOne</span>)</span>&#123;</span><br><span class="line"><span class="comment">//Q:为什么声明res时具体实现为List&lt;IList&lt;int&gt;&gt;类型后，Trackback接收的类型还是IList&lt;IList&lt;int&gt;&gt;？</span></span><br><span class="line"><span class="comment">//A:接口的多态性</span></span><br><span class="line"><span class="comment">//使用接口类型作为参数可以让方法更加通用。Trackback 方法不需要知道 res 的具体实现是什么，只需要知道它是一个实现了 IList&lt;IList&lt;int&gt;&gt; 接口的对象即可。这意味着你可以传递任何实现了 IList&lt;IList&lt;int&gt;&gt; 的对象，而不仅仅是 List&lt;IList&lt;int&gt;&gt;。</span></span><br><span class="line"><span class="comment">//在Permute方法中传给Trackback的res是List&lt;IList&lt;int&gt;&gt;，其它地方可能调用Trackback可以使用IList&lt;IList&lt;int&gt;&gt;，参数类型可以使用接口。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(resOne.Count==nums.Length)&#123;<span class="comment">//跳出一次递归（循环）</span></span><br><span class="line">resAll.Add(<span class="keyword">new</span> List&lt;resOne&gt;);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!resOne.Contains(nums[i]))&#123;</span><br><span class="line">resOne.Add(nums[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Trackback(nums,resAll,resOne);</span><br><span class="line">resOne.RemoveAt(resOne.Count<span class="number">-1</span>);<span class="comment">//回撤</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/18/LeetCode100-51-60/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：41-50解析</title>
      <link>https://pearlchocolatezy.com/2025/05/18/LeetCode100-41-50/</link>
      <guid>https://pearlchocolatezy.com/2025/05/18/LeetCode100-41-50/</guid>
      <pubDate>Sun, 18 May 2025 12:36:28 GMT</pubDate>
      
      
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/18/LeetCode100-41-50/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：31-40解析</title>
      <link>https://pearlchocolatezy.com/2025/05/15/LeetCode100-31-40/</link>
      <guid>https://pearlchocolatezy.com/2025/05/15/LeetCode100-31-40/</guid>
      <pubDate>Thu, 15 May 2025 13:43:58 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;36-二叉树的中序遍历（二叉树-94）&quot;&gt;&lt;a href=&quot;#36-二叉树的中序遍历（二叉树-94）&quot; class=&quot;headerlink&quot; title=&quot;36. 二叉树的中序遍历（二叉树/94）&quot;&gt;&lt;/a&gt;36. 二叉树的中序遍历（二叉树/94）&lt;/h3&gt;&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="36-二叉树的中序遍历（二叉树-94）"><a href="#36-二叉树的中序遍历（二叉树-94）" class="headerlink" title="36. 二叉树的中序遍历（二叉树/94）"></a>36. 二叉树的中序遍历（二叉树/94）</h3><p>给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。<br>假设：树中节点数目在范围 [0, 100] 内；-100 &lt;= Node.val &lt;= 100。<br>输入：root = [1,null,2,3]；输出：[1,3,2]。</p><blockquote><p>【分析】<br>中序遍历：左子树-&gt;根节点-&gt;右子树<br>简单解法：递归算法。复杂解法：迭代算法。<br>知识点：（迭代算法中）当你的方法声明返回<code>IList&lt;int&gt;</code>，而内部返回的是<code>List&lt;int&gt;</code>时，这是完全合法的，因为<code>List&lt;int&gt;</code>实现了<code>IList&lt;int&gt;</code>接口，这是在C#标准库中定义的。在面向对象编程中，这是一种常见的做法，称为“<strong>编程到接口</strong>”（Program to Interface）。这样做的好处是提高了代码的灵活性和可扩展性，因为你的方法可以返回任何实现了<code>IList&lt;int&gt;</code>接口的具体类型，而不仅仅是<code>List&lt;int&gt;</code>。<br>Stack类：（迭代算法中）常用方法是Push，Pop，Peek（返回堆栈顶部的元素，但不将其移除），Contains，Count（没有括号），可用foreach。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;</span></span><br><span class="line"><span class="comment"> *     public TreeNode left;</span></span><br><span class="line"><span class="comment"> *     public TreeNode right;</span></span><br><span class="line"><span class="comment"> *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="comment">//递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">int</span>&gt; <span class="title">InorderTraversal</span>(<span class="params">TreeNode root</span>)</span>&#123;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; res=<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">Inorder(root,res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Inorder</span>(<span class="params">TreeNode node, List&lt;<span class="built_in">int</span>&gt; res</span>)</span>&#123;<span class="comment">//要返回的变量通过参数传入，因为在函数内部也要做编辑</span></span><br><span class="line"><span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">Inorder(node.left,res);</span><br><span class="line">result.Add(node.val);</span><br><span class="line">Inorder(node.right,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代算法（使用栈）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">int</span>&gt; <span class="title">InorderTraversal</span>(<span class="params">TreeNode root</span>)</span>&#123;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; res=<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">TreeNode curr=root;</span><br><span class="line"><span class="keyword">while</span>(curr!=<span class="literal">null</span> || stack.Count&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;<span class="comment">//从根节点开始，不断地将左节点压入栈中</span></span><br><span class="line">stack.Push(curr);</span><br><span class="line">curr=curr.left;</span><br><span class="line">&#125;<span class="comment">//当左节点不存在时，内循环就不走了，下一句弹出的就是中间结点</span></span><br><span class="line">curr=stack.Pop();<span class="comment">//内循环结束后弹出的顺序就是从最左向内</span></span><br><span class="line">res.Add(curr.val);</span><br><span class="line">curr=curr.right;<span class="comment">//走到这里时，当前结点一定没有左节点了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/15/LeetCode100-31-40/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：21-30解析</title>
      <link>https://pearlchocolatezy.com/2025/05/15/LeetCode100-21-30/</link>
      <guid>https://pearlchocolatezy.com/2025/05/15/LeetCode100-21-30/</guid>
      <pubDate>Thu, 15 May 2025 13:42:17 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;22-相交链表（链表-160）&quot;&gt;&lt;a href=&quot;#22-相交链表（链表-160）&quot; class=&quot;headerlink&quot; title=&quot;22. 相交链表（链表/160）&quot;&gt;&lt;/a&gt;22. 相交链表（链表/160）&lt;/h3&gt;&lt;p&gt;给你两个单链表的头节点 head</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="22-相交链表（链表-160）"><a href="#22-相交链表（链表-160）" class="headerlink" title="22. 相交链表（链表/160）"></a>22. 相交链表（链表/160）</h3><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。<br>假设：整个链式结构中不存在环；函数返回结果后，链表必须 保持其原始结构；<br>    intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0<br>    listA - 第一个链表<br>    listB - 第二个链表<br>    skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数<br>    skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数<br>    listA 中节点数目为 m；<br>    listB 中节点数目为 n；<br>    1 &lt;= m, n &lt;= 3 * $(10)^4$；<br>    1 &lt;= Node.val &lt;= $(10)^5$；<br>    0 &lt;= skipA &lt;= m；<br>    0 &lt;= skipB &lt;= n；<br>    如果 listA 和 listB 没有交点，intersectVal 为 0；<br>    如果 listA 和 listB 有交点，intersectVal == listA[skipA] == listB[skipB]。<br>示例：输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3；输出：Intersected at ‘8’。</p><blockquote><p>【分析】<br>链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。<br>链表的本质就是它的数据结构存在一个变量存储下一个同类型变量（或可能为其地址），<strong>注意看下面ListNode的定义，非常重要！！！</strong><br>链表是一种抽象的结构，代码中看不到整个表，只能看到两两结点之间的关系。<br>由答案可知假设，如果两链表相交，相交以后就不再分开<br>方法1：哈希集合<br>先遍历链表A，把所有A的结点记录在HashSet<ListNode>；后遍历链表B，遇到已存在哈希表中的结点就返回出去。<br>这种方法时间复杂度O(m+n)，空间复杂度O(m)。<br>方法2：双指针法<br>如果 A 到达链表 A 的末尾（null），则将其重定向到链表 B 的头节点 headB。<br>如果 B 到达链表 B 的末尾（null），则将其重定向到链表 A 的头节点 headA。<br>设链表 A 的非公共部分长度为 a，链表 B 的非公共部分长度为 b，公共部分长度为 c。<br>指针 A 走过的路径：a + c + b。<br>指针 B 走过的路径：b + c + a。<br>两者路径长度相同，因此会在相交点相遇。<br>该方法时间复杂度O(m+n)，空间复杂度O(1)。</ListNode></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public int val;// 存储节点的数据值</span></span><br><span class="line"><span class="comment"> *     public ListNode next;// 指向链表中下一个节点的引用</span></span><br><span class="line"><span class="comment"> *     public ListNode(int x) // 构造函数，用于创建一个新的ListNode实例</span></span><br><span class="line"><span class="comment"> *     &#123; </span></span><br><span class="line"><span class="comment"> *        val = x; // 初始化节点的数据值为x</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line"><span class="comment">//哈希集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">GetInterscetionNode1</span>(<span class="params">ListNode headA, ListNode headB</span>)</span>&#123;</span><br><span class="line">HashSet&lt;ListNode&gt; hashSet=<span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line"><span class="keyword">while</span>(headA!=<span class="literal">null</span>)&#123;</span><br><span class="line">hashSet.Add(headA);</span><br><span class="line">headA=headA.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(headB!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(hashSet.Contains(headB))&#123;</span><br><span class="line"><span class="keyword">return</span> headB;</span><br><span class="line">&#125;</span><br><span class="line">headB=headB.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双指针法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">GetIntersectionNode2</span>(<span class="params">ListNode headA, ListNode headB</span>)</span> &#123;</span><br><span class="line">        ListNode ap=headA, bp=headB;</span><br><span class="line"><span class="keyword">while</span>(ap!=bp)&#123;</span><br><span class="line">ap=ap==<span class="literal">null</span>?headB:ap.next;</span><br><span class="line">bp=bp==<span class="literal">null</span>?headA:bp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/15/LeetCode100-21-30/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：11-20解析</title>
      <link>https://pearlchocolatezy.com/2025/05/14/LeetCode100-11-21/</link>
      <guid>https://pearlchocolatezy.com/2025/05/14/LeetCode100-11-21/</guid>
      <pubDate>Wed, 14 May 2025 13:48:46 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;13-最大子数组和（普通数组-53）&quot;&gt;&lt;a href=&quot;#13-最大子数组和（普通数组-53）&quot; class=&quot;headerlink&quot; title=&quot;13. 最大子数组和（普通数组/53）&quot;&gt;&lt;/a&gt;13. 最大子数组和（普通数组/53）&lt;/h3&gt;&lt;p&gt;给你一个</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="13-最大子数组和（普通数组-53）"><a href="#13-最大子数组和（普通数组-53）" class="headerlink" title="13. 最大子数组和（普通数组/53）"></a>13. 最大子数组和（普通数组/53）</h3><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>子数组是数组中的一个连续部分。<br>假设：1 &lt;= nums.length &lt;= $(10)^5$；$(-10)^4$ &lt;= nums[i] &lt;= $(10)^4$。</p><blockquote><p>【分析】<br>Kadane算法：时间复杂度为O(n)。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxSubArray</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span>&#123;</span><br><span class="line"><span class="built_in">int</span> maxGlobal=nums[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">int</span> maxHere=nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;nums.Length;i++)&#123;<span class="comment">//循环从第二个元素开始</span></span><br><span class="line"><span class="comment">// 如果当前子数组的和加上当前元素大于当前元素本身，说明继续使用当前子数组更优（下面一行代码的第二项）</span></span><br><span class="line"><span class="comment">// 否则，从当前元素开始新的子数组（下面一行代码的第一项）</span></span><br><span class="line">maxHere=Math.Max(nums[i],maxHere+nums[i]);</span><br><span class="line"><span class="comment">// 更新全局最大子数组和</span></span><br><span class="line">maxGlobal=Math.Max(maxHere,maxGlobal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxGlobal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-矩阵置零（矩阵-73）"><a href="#18-矩阵置零（矩阵-73）" class="headerlink" title="18. 矩阵置零（矩阵/73）"></a>18. 矩阵置零（矩阵/73）</h3><p>给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。<br>假设：m == matrix.length；n == matrix[0].length；1 &lt;= m, n &lt;= 200；$(-2)^(31)$ &lt;= <code>matrix[i][j]</code> &lt;= $2^(31)$ - 1。</p><blockquote><p>【分析】<br>原地算法，又称环形矩阵算法，输入的资料通常会被要输出的部分覆盖掉。<br>题解过程中就是，利用矩阵的第一行和第一列来记录这些信息，而不是额外使用数组，以便减少空间复杂度。<br>先记录首行首列是否本身含0；把有0的行或列标记在首行和首列；再遍历整个矩阵，通过首行首列的0，置零整行整列；最后再根据标记置零第一行第一列。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetZeroes</span>(<span class="params"><span class="built_in">int</span>[][] matrix</span>)</span> &#123;</span><br><span class="line"><span class="comment">//int[][] x=...，左项是行数，右项是列数</span></span><br><span class="line"><span class="comment">//二维数组的表示：[[2,3],[1,2,3],[6],[5,0]]</span></span><br><span class="line"><span class="comment">//上述数组有4行，第一行有2列……</span></span><br><span class="line"><span class="comment">//x[0]=[2,3]; x[0]表示第一行</span></span><br><span class="line"><span class="built_in">int</span> m=matrix.Length;</span><br><span class="line"><span class="built_in">int</span> n=matrix[<span class="number">0</span>].Length;</span><br><span class="line"><span class="built_in">bool</span> firstRowHasZero=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">bool</span> firstColHasZero=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">// for(int j=0;j&lt;n;j++)&#123;</span></span><br><span class="line"><span class="comment">// if(matrix[0][j]==0)&#123;</span></span><br><span class="line"><span class="comment">// firstRowHasZero=true;</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// for(int i=0;i&lt;m;i++)&#123;</span></span><br><span class="line"><span class="comment">// if(matrix[i][0]==0)&#123;</span></span><br><span class="line"><span class="comment">// firstColHasZero=true;</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//for循环写法和Any的LINQ语法时间空间复杂度一致，时间复杂度=O(n)，空间复杂度=O(1)。（但是LINQ看起来更简洁）</span></span><br><span class="line">firstRowHasZero=matrix[<span class="number">0</span>].Any(c=&gt;c==<span class="number">0</span>);<span class="comment">//检查第一行是否存在0</span></span><br><span class="line">firstColHasZero=matrix.Any(r=&gt;r[<span class="number">0</span>]==<span class="number">0</span>);<span class="comment">//检查第一行是否存在0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">matrix[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">matrix[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[i][<span class="number">0</span>]==<span class="number">0</span> || matrix[<span class="number">0</span>][j]==<span class="number">0</span>)&#123;</span><br><span class="line">matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(firstRowHasZero)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">matrix[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(firstColHasZero)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">matrix[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/14/LeetCode100-11-21/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode热题100：81-90解析</title>
      <link>https://pearlchocolatezy.com/2025/05/07/LeetCode100-1-10/</link>
      <guid>https://pearlchocolatezy.com/2025/05/07/LeetCode100-1-10/</guid>
      <pubDate>Wed, 07 May 2025 14:27:52 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;1-两数之和（哈希-1）&quot;&gt;&lt;a href=&quot;#1-两数之和（哈希-1）&quot; class=&quot;headerlink&quot; title=&quot;1. 两数之和（哈希/1）&quot;&gt;&lt;/a&gt;1. 两数之和（哈希/1）&lt;/h3&gt;&lt;p&gt;给定一个整数数组nums和一个目标整数target，请在</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="1-两数之和（哈希-1）"><a href="#1-两数之和（哈希-1）" class="headerlink" title="1. 两数之和（哈希/1）"></a>1. 两数之和（哈希/1）</h3><p>给定一个整数数组nums和一个目标整数target，请在nums中找到和为target的两个整数的数组下标，求一个时间复杂度小于O($n^2$)的算法。<br>假设：每组给定条件只有一个答案；不能使用相同的数组元素；2 &lt;= nums.length &lt;= $(10)^4$；$(-10)^9$ &lt;= nums[i] &lt;= $(10)^9$；$(-10)^9$ &lt;= target &lt;= $(10)^9$。<br>示例：输入：nums = [2,7,11,15], target = 9。输出：[0,1]。</p><blockquote><p>【分析】<br>方法1：暴力法。复杂度O($n^2$)。<br>方法2：双指针法。先对数组排序，创建两个指针，放置在数组一头一尾，分别向中间移动，和大于target则左移右指针，和小于target则右移左指针，直到两指针相遇，可遍历整个数组，而时间复杂度为O(n)。（排序后一定不存在位置交错的解，比如10=1+9=2+8=3+7=4+6，一定是向内对称的）<br>方法3：哈希表法。存储互补数对应的下标的哈希表，检查互补数是否已在哈希表中。（不需要预先排序）（主要考虑这个解法，因为题意不要求数组排序）</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C#使用Dictionary（哈希表法）</span></span><br><span class="line"><span class="comment">//这种方法的时间复杂度为O(n)，空间复杂度也为O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">TwoSum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span> &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span> ,<span class="built_in">int</span>&gt; dic= <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;();<span class="comment">//Key:互补数, Value:下标。 视作哈希表，存储每一位的互补数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++)&#123;</span><br><span class="line">            <span class="built_in">int</span> leftAmt= target-nums[i];<span class="comment">//求互补数</span></span><br><span class="line">            <span class="keyword">if</span>(dic.ContainsKey(leftAmt)&amp;&amp;dic[leftAmt]!=i)&#123;<span class="comment">//检查互补数是否已在哈希表中</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;i, dic[leftAmt]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!dic.ContainsKey(nums[i]))&#123;</span><br><span class="line">                dic.Add(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[]&#123; &#125;;<span class="comment">//没有找到解，返回一个空数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法3：哈希表法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target)&#123;</span><br><span class="line">HashMap&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line"><span class="type">int</span> leftAmt=target-nums[i];</span><br><span class="line"><span class="keyword">if</span>(map.ContainsKey(leftAmt))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(leftAmt),i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">map.put(nums[i],i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法2：双指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target)&#123;</span><br><span class="line"><span class="type">int</span>[][] originNums=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length][<span class="number">2</span>];<span class="comment">//保存原始索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">originNums[i][<span class="number">0</span>]=nums[i];</span><br><span class="line">originNums[i][<span class="number">1</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(originNums,(a,b)-&gt;a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化双指针</span></span><br><span class="line"><span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="type">int</span> sum=originNums[left][<span class="number">0</span>]+originNums[right][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;originNums[left][<span class="number">1</span>],originNums[right][<span class="number">1</span>]&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字母异位词分组（哈希-49）"><a href="#2-字母异位词分组（哈希-49）" class="headerlink" title="2. 字母异位词分组（哈希/49）"></a>2. 字母异位词分组（哈希/49）</h3><p>字母异位词：由重新排列源单词的所有字母得到的一个新单词。<br>给定一个字符串数组strs，请将字母异位词组合在一起。<br>假设：1&lt;=strs.length&lt;=$(10)^4$；0&lt;=strs[i].length&lt;=100；strs仅包含小写字母。<br>示例：输入: strs = [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]。输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]。</p><blockquote><p>【分析】<br>找出由相同字母组成的单词，每种字母的个数也相同，分到一组。输出的是一个二维数组。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法：对数组中的每个字符串按字符排序，放入键值对中</span></span><br><span class="line"><span class="comment">//知识点：IList是一个抽象接口，List是它的一个具体实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="comment">//写法1：</span></span><br><span class="line"><span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; GroupAnagrams(<span class="built_in">string</span>[] strs)&#123;</span><br><span class="line">List&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; res=<span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>,IList&lt;<span class="built_in">string</span>&gt;&gt; grp=<span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,IList&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">string</span> str <span class="keyword">in</span> strs)&#123;</span><br><span class="line"><span class="built_in">string</span> rt=String.Concat(str.OrderBy(ch=&gt;ch));<span class="comment">//按字符升序排序</span></span><br><span class="line"><span class="keyword">if</span>(grp.ContainsKey(rt))&#123;</span><br><span class="line">grp[rt].Add(str);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">grp[rt]=<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;&#123;str&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">string</span> key <span class="keyword">in</span> grp.Keys)&#123;</span><br><span class="line">res.Add(grp[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; GroupAnagrams(<span class="built_in">string</span>[] strs)</span><br><span class="line">&#123;</span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> str <span class="keyword">in</span> strs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">char</span>[] arr = str.ToCharArray();</span><br><span class="line">Array.Sort(arr);</span><br><span class="line"><span class="built_in">string</span> key = <span class="keyword">new</span> <span class="built_in">string</span>(arr); </span><br><span class="line"><span class="keyword">if</span> (!dic.ContainsKey(key))</span><br><span class="line">dic[key] = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">dic[key].Add(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">string</span>&gt;&gt;(dic.Values);<span class="comment">//用dic转list</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;string&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span>&#123;</span><br><span class="line">Map&lt;String,List&lt;String&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String s:strs)&#123;</span><br><span class="line"><span class="type">char</span>[] ca=s.toCharArray();</span><br><span class="line">Array.sort(ca);</span><br><span class="line">String key=String.valueOf(ca);</span><br><span class="line"><span class="keyword">if</span>(!ans.containsKey(key))&#123;</span><br><span class="line">ans.put(key,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line">ans.get(key).add(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(ans.values());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-移动零（双指针-283）"><a href="#4-移动零（双指针-283）" class="headerlink" title="4. 移动零（双指针/283）"></a>4. 移动零（双指针/283）</h3><p>给定一个数组nums，将所有0移动到数组的末尾，同时保持非零元素的相对顺序。<br>假设：不能复制数组；1 &lt;= nums.length &lt;= $(10)^4$；$(-2)^(31)$ &lt;= nums[i] &lt;= $2^(31)$ - 1。<br>示例：输入: nums = [0,1,0,3,12]，输出: [1,3,12,0,0]。</p><blockquote><p>【分析】</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双指针法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveZeroes</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span>&#123;</span><br><span class="line"><span class="built_in">int</span> current=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">nums[current]=nums[i];<span class="comment">//一定是往前替换0，不会出现非0数被替换的情况</span></span><br><span class="line"><span class="keyword">if</span>(current!=i)&#123;</span><br><span class="line">nums[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">current++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-盛最多水的容器（双指针-11）"><a href="#5-盛最多水的容器（双指针-11）" class="headerlink" title="5. 盛最多水的容器（双指针/11）"></a>5. 盛最多水的容器（双指针/11）</h3><p>给定一个长度为n的整数数组heightArr，有n条垂线，第i条线的两个端点是(i,0)和(i,heightArr[i])。找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水，返回容器可存储的最大水量。</p><blockquote><p>【分析】<br>面积按最短板来求，在两个指针移动过程中求最大面积。<br>因为每一次都重新取最大值，所以高度数组不用提前排序。<br>间复杂度为 O(n)，空间复杂度为 O(1)。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MaxArea</span>(<span class="params"><span class="built_in">int</span>[] heightArr</span>)</span>&#123;</span><br><span class="line"><span class="built_in">int</span> maxArea=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> right=heightArr.Length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="built_in">int</span> currentArea=Math.Min(heightArr[left],heightArr[right])*(right-left);</span><br><span class="line">maxArea=Math.Max(maxArea,currentArea);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(heightArr[left]&lt;heightArr[right])&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-无重复字符的最长子串（滑动窗口-3）"><a href="#8-无重复字符的最长子串（滑动窗口-3）" class="headerlink" title="8. 无重复字符的最长子串（滑动窗口/3）"></a>8. 无重复字符的最长子串（滑动窗口/3）</h3><p>给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。<br>假设：0 &lt;= s.length &lt;= 5 * $(10)^4$；s 由英文字母、数字、符号和空格组成。<br>示例：输入: s = “pwwkew”；输出: 3。（最长子串是“wke”）</p><blockquote><p>【分析】<br>解法：滑动窗口。<br>这种方法的核心思想是使用两个指针来表示当前考察的子串的左右边界，并通过移动右边界来扩展子串，如果遇到重复字符，则移动左边界来缩小子串，直到重复字符被移除。在这个过程中，我们维护一个变量来记录当前无重复字符的最长子串的长度。<br>（1）使用HashSet作为滑动窗口。时间复杂度：O(2n) = O(n)，空间复杂度：O(min(m,n)) 。<br>HashSet<T> 是一个非常有用的集合类，是基于哈希表实现的，提供了平均时间复杂度为 O(1) 的操作性能。HashSet<T> 中的元素没有特定的顺序；集合中的元素是唯一的；添加、删除和查找操作的平均时间复杂度为 O(1)；不是线程安全的（如果在多线程环境中，可以使用Dictionary）。<br>（2）使用Dictionary的滑动窗口。时间复杂度：O(n)，空间复杂度：O(min(m,n)) 。</T></T></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">LengthOfLongestSubstring</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>&#123;</span><br><span class="line">Dictionary&lt;<span class="built_in">char</span>,<span class="built_in">int</span>&gt; dic=<span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>,<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="built_in">int</span> result=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> left=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> right=<span class="number">0</span>;right&lt;s.Length;right++)&#123;</span><br><span class="line"><span class="built_in">char</span> c=s[right];</span><br><span class="line"><span class="keyword">if</span>(dic.ContainsKey(c))&#123;</span><br><span class="line">left=Math.Max(dic[c]+<span class="number">1</span>,left);</span><br><span class="line">&#125;</span><br><span class="line">dic[c]=right;</span><br><span class="line">result=Math.Max(result,right-left+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-和为K的子数组（子串-560）"><a href="#10-和为K的子数组（子串-560）" class="headerlink" title="10. 和为K的子数组（子串/560）"></a>10. 和为K的子数组（子串/560）</h3><p>给定一个整数数组nums和一个整数k，请统计并返回该数组中和为k的子数组的个数。<br>子数组是数组中元素的连续非空序列。<br>假设：1 &lt;= nums.length &lt;= 2 * $(10)^4$；-1000 &lt;= nums[i] &lt;= 1000；$(-10)^7$ &lt;= k &lt;= $(10)^7$。<br>示例：输入：nums = [1,2,3], k = 3；输出：2。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SubarraySum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> k</span>)</span>&#123;</span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt; prefixSum=<span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;();</span><br><span class="line">prefixSum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++)&#123;</span><br><span class="line">sum+=nums[i];</span><br><span class="line"><span class="built_in">int</span> target=sum-k;</span><br><span class="line"><span class="keyword">if</span>(prefixSum.ContainsKey(target))&#123;</span><br><span class="line">count+=prefixSum[target];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!prefixSum.ContainsKey(sum))&#123;</span><br><span class="line">prefixSum[sum]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">prefixSum[sum]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      
      <category domain="https://pearlchocolatezy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      
      <category domain="https://pearlchocolatezy.com/tags/C/">C#</category>
      
      <category domain="https://pearlchocolatezy.com/tags/Java/">Java</category>
      
      <category domain="https://pearlchocolatezy.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://pearlchocolatezy.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://pearlchocolatezy.com/2025/05/07/LeetCode100-1-10/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
